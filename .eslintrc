{
    "env": {
        "browser": true,
        "commonjs": true,
        "es6": true,
        "jest": true,
        "node": true
    },
    "extends": [
        "plugin:react/recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
        // "prettier/@typescript-eslint"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true,
            "modules": true,
            "experimentalObjectRestSpread": true
        }
    },
    "plugins": [
        "prettier",
        "react",
        "react-hooks",
        "jsx-a11y",
        "@typescript-eslint"
    ],
    "rules": {
        "no-restricted-globals": [
            "error",
            {
                "name": "event",
                "message": "Use local parameter instead."
            },
            {
                "name": "name",
                "message": "Greg said: Never use global `name`"
            }
        ],
        "no-shadow": [
            "error",
            {
                "builtinGlobals": false,
                "hoist": "functions",
                "allow": []
            }
        ],
        "no-alert": "error",
        "react-hooks/rules-of-hooks": "error",
        "@typescript-eslint/interface-name-prefix": "off",
        "react/jsx-props-no-spreading": "off",
        "react-hooks/exhaustive-deps": "off",
        "@typescript-eslint/explicit-member-accessibility": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-unused-vars": [
            "error",
            {
                "vars": "all",
                "varsIgnorePattern": "^_",
                "argsIgnorePattern": "^_"
            }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-use-before-define": "off",
        "react/display-name": "off",
        "no-console": 2,
        "react/prop-types": 0,
        "jsx-a11y/label-has-for": [
            2,
            {
                "required": {
                    "some": [
                        "nesting",
                        "id"
                    ]
                }
            }
        ],
        "jsx-a11y/label-has-associated-control": [
            2,
            {
                "labelAttributes": [
                    "label"
                ],
                "depth": 2
            }
        ],
        "react/jsx-filename-extension": [
            1,
            {
                "extensions": [
                    ".js",
                    ".tsx"
                ]
            }
        ],
        "prettier/prettier": [
            "error",
            {
                // "parser": "typescript",
                "semi": false,
                "singleQuote": false,
                "printWidth": 120,
                "tabWidth": 4,
                "trailingComma": "none",
                "arrowParens": "avoid",
                "jsxBracketSameLine": true
            }
        ],
        "react/jsx-one-expression-per-line": "off",
        "react/destructuring-assignment": "off",
        "import/prefer-default-export": "off"
    },
    "globals": {
        "window": "writable",
        "document": "writable",
        "localStorage": "writable",
        "FormData": "writable",
        "FileReader": "writable",
        "Blob": "writable",
        "navigator": "writable"
    },
    "overrides": [
        {
            "files": [
                "src/**/*.ts"
            ],
            "parserOptions": {
                "ecmaFeatures": {
                    "jsx": false
                }
            }
        }
    ],
    "settings": {
        "import/resolver": {
            "node": {
                "extensions": [
                    ".ts",
                    ".tsx"
                ]
            }
        },
        "react": {
            "pragma": "React", // Pragma to use, default to "React"
            "version": "detect"
        }
    }
}
